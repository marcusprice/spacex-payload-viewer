{"version":3,"sources":["img/payload.jpg","img/rocket.jpg","components/Header.jsx","components/PayloadCard.jsx","components/RocketCard.jsx","components/Content.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","onClick","setContentType","PayloadCard","className","src","payload","alt","payload_id","payload_type","nationality","manufacturer","payload_mass_lbs","ContentCard","rocket","rocket_id","rocket_name","rocket_type","Content","useState","spacexData","setSpacexData","useEffect","request","contentType","fetch","method","headers","body","JSON","stringify","query","then","response","json","result","data","payloads","rockets","length","map","value","key","RocketCard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sICgB3BC,EAdD,SAACC,GACd,OACE,gCACE,qDACA,6BACE,4BACE,wBAAIC,QAAS,WAAOD,EAAME,eAAe,aAAzC,gBACA,wBAAID,QAAS,WAAOD,EAAME,eAAe,YAAzC,mB,gBCSKC,EAfK,SAACH,GAEnB,OACE,yBAAKI,UAAU,gBACb,yBAAKA,UAAU,sBAAsBC,IAAKC,IAASC,IAAI,gBACvD,yBAAKH,UAAU,QACb,4BAAKJ,EAAMQ,WAAX,KAAyBR,EAAMS,aAA/B,KACA,4BAAKT,EAAMU,aACTV,EAAMW,aAAiB,sDAAwBX,EAAMW,eAAwB,GAC7EX,EAAMY,iBAAqB,6CAAeZ,EAAMY,iBAArB,SAAqD,M,gBCI3EC,EAbK,SAACb,GACnB,OACE,yBAAKI,UAAU,gBACb,yBAAKA,UAAU,sBAAsBC,IAAKS,IAAQP,IAAI,oBACtD,yBAAKH,UAAU,QACb,4BAAKJ,EAAMe,WACX,4BAAKf,EAAMgB,aACX,4BAAKhB,EAAMiB,gBCoFJC,EA1FC,SAAClB,GAAW,IAAD,EACSmB,mBAAS,IADlB,mBACpBC,EADoB,KACRC,EADQ,KAIzBC,qBAAU,WACR,IAAIC,EAEFA,EADuB,YAAtBvB,EAAMwB,YACA,iLAWA,sHAWTC,MAAM,WAAY,CAChBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACC,MAAOR,MAE5BS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACoB,YAAtBnC,EAAMwB,YACPH,EAAcc,EAAOC,KAAKC,UAE1BhB,EAAcc,EAAOC,KAAKE,cAG/B,CAACtC,EAAMwB,cAuCV,OACE,iCApCGJ,EAAWmB,OAAS,EACI,YAAtBvC,EAAMwB,YAEEJ,EAAWoB,KAAI,SAACC,EAAOC,GAC9B,OACE,kBAAC,EAAD,CACEA,IAAKA,EACLlC,WAAYY,EAAWsB,GAAKlC,WAC5BG,aAAcS,EAAWsB,GAAK/B,aAC9BD,YAAaU,EAAWsB,GAAKhC,YAC7BD,aAAcW,EAAWsB,GAAKjC,aAC9BG,iBAAkBQ,EAAWsB,GAAK9B,sBAM/BQ,EAAWoB,KAAI,SAACC,EAAOC,GAC9B,OACE,kBAACC,EAAD,CACED,IAAKA,EACL3B,UAAWK,EAAWsB,GAAK3B,UAC3BC,YAAaI,EAAWsB,GAAK1B,YAC7BC,YAAaG,EAAWsB,GAAKzB,iBAM5B,KCjEA2B,G,MAXH,WAAO,IAAD,EACoBzB,mBAAS,WAD7B,mBACXK,EADW,KACEtB,EADF,KAGhB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAQF,eAAgBA,IACxB,kBAAC,EAAD,CAASsB,YAAaA,OCCRqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d937652.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/payload.60d82d74.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.3e2d5887.jpg\";","import React from 'react';\n\nconst Header = (props) => {\n  return(\n    <header>\n      <h1>Spacex Payload Viewer</h1>\n      <nav>\n        <ul>\n          <li onClick={() => {props.setContentType('payload')}}>Payload Data</li>\n          <li onClick={() => {props.setContentType('rocket')}}>Rocket Data</li>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport  default Header;\n","import React from 'react';\nimport payload from '../img/payload.jpg';\n\nconst PayloadCard = (props) => {\n\n  return(\n    <div className=\"content-card\">\n      <img className=\"content-card-header\" src={payload} alt=\"payload car\" />\n      <div className=\"info\">\n        <h2>{props.payload_id} ({props.payload_type})</h2>\n        <h3>{props.nationality}</h3>\n        {(props.manufacturer) ? (<h3>{`Manufactured by ${props.manufacturer}`}</h3>) : ''}\n        {(props.payload_mass_lbs) ? (<h3>{`Weighs ${props.payload_mass_lbs} Lbs`}</h3>) : ''}\n      </div>\n    </div>\n  )\n}\n\nexport default PayloadCard;\n","import React from 'react';\nimport rocket from '../img/rocket.jpg';\n\nconst ContentCard = (props) => {\n  return(\n    <div className=\"content-card\">\n      <img className=\"content-card-header\" src={rocket} alt=\"rocket in space\" />\n      <div className=\"info\">\n        <h2>{props.rocket_id}</h2>\n        <h3>{props.rocket_name}</h3>\n        <h3>{props.rocket_type}</h3>\n      </div>\n    </div>\n  )\n}\n\nexport default ContentCard;\n","import React, { useState, useEffect } from 'react';\nimport PayloadCard from './PayloadCard';\nimport RocketCard from './RocketCard';\n\nconst Content = (props) => {\n  let [spacexData, setSpacexData] = useState([]); //stores the data\n\n  //hits the api for data every time the content type prop changes\n  useEffect(() => {\n    let request;\n    if(props.contentType === 'payload') {\n      request = `\n      {\n        payloads {\n          payload_id,\n          manufacturer,\n          nationality,\n          payload_type,\n          payload_mass_lbs\n        }\n      }`;\n    } else {\n      request = `\n      {\n      \trockets {\n      \t  rocket_id\n      \t  rocket_name\n      \t  rocket_type\n      \t}\n      }`;\n    }\n\n    //fetch data from api\n    fetch('/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({query: request})\n    })\n      .then(response => response.json())\n      .then((result) => {\n        if(props.contentType === 'payload') {\n          setSpacexData(result.data.payloads);\n        } else {\n          setSpacexData(result.data.rockets);\n        }\n      })\n  }, [props.contentType]);\n\n  const handleDisplay = () => {\n    let output;\n    if(spacexData.length > 1) {\n      if(props.contentType === 'payload') { //if content type is payload\n        //build a list of payload cards\n        output = spacexData.map((value, key) => {\n          return (\n            <PayloadCard\n              key={key}\n              payload_id={spacexData[key].payload_id}\n              manufacturer={spacexData[key].manufacturer}\n              nationality={spacexData[key].nationality}\n              payload_type={spacexData[key].payload_type}\n              payload_mass_lbs={spacexData[key].payload_mass_lbs}\n            />\n          )\n        })\n      } else {  //if content type is rocket\n        //build a list of rocket cards\n        output = spacexData.map((value, key) => {\n          return (\n            <RocketCard\n              key={key}\n              rocket_id={spacexData[key].rocket_id}\n              rocket_name={spacexData[key].rocket_name}\n              rocket_type={spacexData[key].rocket_type}\n            />\n          )\n        })\n      }\n    } else {  //no data, render no cards\n      output = '';\n    }\n\n    return output;\n  }\n\n  return(\n    <section>\n      {handleDisplay()}\n    </section>\n  )\n}\n\nexport default Content;\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport './App.css';\n\nconst App = () => {\n  let [contentType, setContentType] = useState('payload');\n\n  return(\n    <div className=\"app\">\n      <Header setContentType={setContentType} />\n      <Content contentType={contentType} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}